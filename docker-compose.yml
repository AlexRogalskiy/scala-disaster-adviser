version: '3.7'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    hostname: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-server:6.0.1
    hostname: broker
    container_name: broker
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
      - "29092:29092"
      - "29091:29091"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:29091
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'

  event-service:
    hostname: event-service
    build:
      context: .
      dockerfile: ./docker/event-service/Dockerfile
    ports:
      - 8002:8002
    volumes:
      - ./:/go/src/scala-disaster-adviser

  event-service-job:
    build:
      context: .
      dockerfile: ./docker/event-service-job/Dockerfile
    depends_on:
      - broker
    volumes:
      - ./:/go/src/scala-disaster-adviser

  da_postgresql:
    image: postgis/postgis
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: db
    ports:
      - 9032:5432
    volumes:
      - ./docker/postgresql/database:/docker-entrypoint-initdb.d/

  notification-service:
    hostname: notification-service
    container_name: notification-service
    build:
      context: .
      dockerfile: ./docker/notification-service/Dockerfile
    depends_on:
      - broker
      - event-service
    ports:
      - "8080:8080"
    environment:
      - KAFKA_SERVER=broker:29092
      - USER_SERVICE_ENDPOINT=http://192.168.0.111:8090/user-events
      - DISASTER_SERVICE_ENDPOINT=http://192.168.0.111:8090/disasters

  disaster-service:
    hostname: event-service
    build:
      context: .
      dockerfile: ./docker/disaster-service/Dockerfile
    depends_on:
      - mongo
      - broker
    environment:
      KAFKA_HOST: broker:29092
      KAFKA_TOPIC: disaster-events
      MONGO_HOST: mongo
      MONGO_USER: root
      MONGO_PASS: root

  disaster-service-server:
    build:
      context: .
      dockerfile: ./docker/disaster-service-server/Dockerfile
    depends_on:
      - mongo
    ports:
      - 8003:8003
    environment:
      MONGO_HOST: mongo
      MONGO_USER: root
      MONGO_PASS: root

  mongo:
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
